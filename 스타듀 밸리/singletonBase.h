#pragma once

template <typename T>
class singletonBase
{
protected:
	static T* singleton;

	singletonBase() {};
	~singletonBase() {};
public:
	//ΩÃ±€≈Ê ¡¢±Ÿ¿⁄
	static T* getSingleton(void);
	//ΩÃ±€≈Ê «ÿ¡¶
	void releaseSingleton(void);
	
};

//ΩÃ±€≈Ê √ ±‚»≠
template <typename T>
T* singletonBase<T>::singleton = 0;

template <typename T>
T* singletonBase<T>::getSingleton(void)
{
	//ΩÃ±€≈Ê¿Ã æ¯¿∏∏È «“¥Á«ÿ∂Û
	if (!singleton) singleton = new T;

	//±◊∏Æ∞Ì π›»Ø
	return singleton;
}

template <typename T>
void singletonBase<T>::releaseSingleton(void)
{
	if (singleton)
	{
		delete singleton;

		singleton = 0;
	}
}